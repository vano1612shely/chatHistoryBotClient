/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardUsersImport } from './routes/dashboard/users'
import { Route as DashboardSubscriptionsImport } from './routes/dashboard/subscriptions'
import { Route as DashboardChannelsImport } from './routes/dashboard/channels'
import { Route as DashboardBotImport } from './routes/dashboard/bot'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardUsersRoute = DashboardUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSubscriptionsRoute = DashboardSubscriptionsImport.update({
  id: '/subscriptions',
  path: '/subscriptions',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardChannelsRoute = DashboardChannelsImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardBotRoute = DashboardBotImport.update({
  id: '/bot',
  path: '/bot',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/bot': {
      id: '/dashboard/bot'
      path: '/bot'
      fullPath: '/dashboard/bot'
      preLoaderRoute: typeof DashboardBotImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/channels': {
      id: '/dashboard/channels'
      path: '/channels'
      fullPath: '/dashboard/channels'
      preLoaderRoute: typeof DashboardChannelsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/subscriptions': {
      id: '/dashboard/subscriptions'
      path: '/subscriptions'
      fullPath: '/dashboard/subscriptions'
      preLoaderRoute: typeof DashboardSubscriptionsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/users': {
      id: '/dashboard/users'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardBotRoute: typeof DashboardBotRoute
  DashboardChannelsRoute: typeof DashboardChannelsRoute
  DashboardSubscriptionsRoute: typeof DashboardSubscriptionsRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardBotRoute: DashboardBotRoute,
  DashboardChannelsRoute: DashboardChannelsRoute,
  DashboardSubscriptionsRoute: DashboardSubscriptionsRoute,
  DashboardUsersRoute: DashboardUsersRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/bot': typeof DashboardBotRoute
  '/dashboard/channels': typeof DashboardChannelsRoute
  '/dashboard/subscriptions': typeof DashboardSubscriptionsRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard/bot': typeof DashboardBotRoute
  '/dashboard/channels': typeof DashboardChannelsRoute
  '/dashboard/subscriptions': typeof DashboardSubscriptionsRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/bot': typeof DashboardBotRoute
  '/dashboard/channels': typeof DashboardChannelsRoute
  '/dashboard/subscriptions': typeof DashboardSubscriptionsRoute
  '/dashboard/users': typeof DashboardUsersRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/bot'
    | '/dashboard/channels'
    | '/dashboard/subscriptions'
    | '/dashboard/users'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard/bot'
    | '/dashboard/channels'
    | '/dashboard/subscriptions'
    | '/dashboard/users'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/dashboard/bot'
    | '/dashboard/channels'
    | '/dashboard/subscriptions'
    | '/dashboard/users'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/bot",
        "/dashboard/channels",
        "/dashboard/subscriptions",
        "/dashboard/users",
        "/dashboard/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/dashboard/bot": {
      "filePath": "dashboard/bot.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/channels": {
      "filePath": "dashboard/channels.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/subscriptions": {
      "filePath": "dashboard/subscriptions.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/users": {
      "filePath": "dashboard/users.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
